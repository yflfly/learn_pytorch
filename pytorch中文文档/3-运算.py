# coding:utf-8
import torch


def h_add_1():
    # 以加法为例
    y = torch.rand(5, 3)
    x = torch.rand(5, 3)
    print(x + y)
    print(torch.add(x, y))
    '''
    # 以加法为例
    tensor([[0.8864, 1.6820, 1.3010],
            [0.3545, 0.8191, 0.9807],
            [1.2561, 1.8432, 0.6824],
            [0.9483, 1.1091, 1.3305],
            [0.5876, 0.8682, 1.4919]])
    tensor([[0.8864, 1.6820, 1.3010],
            [0.3545, 0.8191, 0.9807],
            [1.2561, 1.8432, 0.6824],
            [0.9483, 1.1091, 1.3305],
            [0.5876, 0.8682, 1.4919]])
    可以看出输出的结果一致
    '''


def h_add_2():
    # 加法：给定一个输出张量作为参数
    y = torch.rand(5, 3)
    x = torch.rand(5, 3)
    result = torch.empty(5, 3)
    torch.add(x, y, out=result)
    print(result)
    '''
    输出结果：
    tensor([[0.9120, 1.3099, 1.4998],
        [1.6409, 0.9122, 1.0279],
        [0.5219, 0.6001, 1.2605],
        [0.9330, 1.3798, 0.4597],
        [0.8586, 1.8294, 1.3102]])
    '''

    # 加法：原位/原地操作（in-place）
    # adds x to y
    y.add_(x)
    print(y)
    '''
    注意：
    任何一个in-place改变张量的操作后面都固定一个_。例如x.copy_(y)、x.t_()将更改x
    '''
    '''
    输出结果：
    tensor([[0.9120, 1.3099, 1.4998],
        [1.6409, 0.9122, 1.0279],
        [0.5219, 0.6001, 1.2605],
        [0.9330, 1.3798, 0.4597],
        [0.8586, 1.8294, 1.3102]])
    '''

    # 也可以使用像标准的NumPy一样的各种索引操作：
    print(x[:, 1])
    '''
    tensor([0.8780, 0.4829, 0.7560, 0.0561, 0.6991])
    注：可能和上述的结果不太一样，因为不是同一时间执行的
    '''


def h_add_3():
    # 改变形状：如果想改变形状，可以使用torch.view
    x = torch.randn(4, 4)
    y = x.view(16)
    z = x.view(-1, 8)  # the size -1 表示根据其他的数值来计算该位置的数值
    print(x.size(), y.size(), z.size())

    # 输出
    '''
    torch.Size([4, 4])
    torch.Size([16])
    torch.Size([2, 8])
    '''
    # 如果是仅包含一个元素的tensor，可以使用.item()来得到对应的python数值
    x = torch.randn(1)
    print(x)
    print(x.item())
    '''
    输出：
    tensor([-0.7404])
    -0.7403632402420044
    '''


if __name__ == '__main__':
    h_add_3()
